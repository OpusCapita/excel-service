'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /* eslint-disable consistent-return */
/* eslint-disable no-plusplus */
/* eslint-disable no-bitwise */


var _xlsxStyles = require('xlsx-styles');

var _xlsxStyles2 = _interopRequireDefault(_xlsxStyles);

var _fileSaver = require('file-saver');

var _fileSaver2 = _interopRequireDefault(_fileSaver);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var writeOptions = {
  type: 'binary',
  bookSST: false,
  bookType: 'xlsx',
  showGridLines: false
};

var EXCEL_MAX_ROW_COUNT = 1048576;
var EXCEL_MAX_COL_COUNT = 16384;

// https://www.npmjs.com/package/xlsx-styles#cell-styles
var borderStyle = { style: 'thin', color: { rgb: 'CCCCCC' } };
var border = {
  border: {
    top: borderStyle,
    bottom: borderStyle,
    left: borderStyle,
    right: borderStyle
  }
};

var createColumnTitles = function createColumnTitles() {
  var columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var colOffset = arguments[1];
  var headerStyle = arguments[2];
  var noBorders = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var cells = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
  var rowIndex = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

  var row = [];
  columns.forEach(function (column, colIndex) {
    var cellIndex = colOffset + colIndex;
    if (Array.isArray(column)) {
      return createColumnTitles(column, colOffset, headerStyle, noBorders, cells, colIndex);
    }
    var cellValue = (column || {}).header || '';
    var cell = { v: cellValue, t: 's', s: headerStyle };
    if (!noBorders) {
      cell.s = _extends({}, cell.s, border);
    }
    var cellRef = _xlsxStyles2.default.utils.encode_cell({ c: cellIndex, r: rowIndex });
    var cellData = { cell: cell, cellRef: cellRef };
    if (column && column.merge > 1) {
      cellData.merge = {
        s: {
          c: cellIndex,
          r: rowIndex
        },
        e: {
          c: cellIndex + (column.merge - 1),
          r: rowIndex
        }
      };
    }
    var upperCell = rowIndex > 0 ? cells[rowIndex - 1][colIndex] : undefined;
    if (column && column.valueKeyPath) {
      cellData.valueKeyPath = column.valueKeyPath;
      cellData.valueRender = column.valueRender;
      cellData.disableValueRenderInExcel = column.disableValueRenderInExcel;
      if (column.valueOptions && column.valueOptions.multiplier) {
        cellData.multiplier = column.valueOptions.multiplier;
      }
    } else if (rowIndex > 0) {
      cellData.valueKeyPath = upperCell.valueKeyPath;
    }
    var wch = upperCell && !upperCell.merge && upperCell.wch > cellValue.length ? upperCell.wch : cellValue.length;
    cellData.wch = wch;
    row.push(cellData);
  });
  if (row.length > 0) {
    cells.push(row);
  }
  return cells;
};

var createDataSheet = function createDataSheet(exportData) {
  var columns = exportData.columns,
      _exportData$data = exportData.data,
      data = _exportData$data === undefined ? [] : _exportData$data,
      dataStyle = exportData.dataStyle,
      formatter = exportData.formatter,
      headerStyle = exportData.headerStyle,
      noBorders = exportData.noBorders,
      rows = exportData.rows;

  var worksheet = {};
  var colOffset = rows && rows.length > 0 ? 1 : 0;
  var columnTitles = createColumnTitles(columns, colOffset, headerStyle, noBorders);
  var rowOffset = columnTitles.length;

  var merges = [];
  if (rows && rows.length > 0 && rowOffset > 1) {
    merges.push({ s: { c: 0, r: 0 }, e: { c: 0, r: rowOffset - 1 } });
  }

  var cols = [];

  columnTitles.forEach(function (columnRow) {
    return columnRow.forEach(function (columnTitle, colIndex) {
      worksheet[columnTitle.cellRef] = columnTitle.cell;
      if (columnTitle.merge) {
        merges.push(columnTitle.merge);
      }
      cols[colIndex] = { wch: columnTitle.wch };
    });
  });

  if (rows) {
    var wch = 0;
    rows.forEach(function (row, rowIndex) {
      var cellRowIndex = rowIndex + rowOffset;
      var cellRef = _xlsxStyles2.default.utils.encode_cell({ c: 0, r: cellRowIndex });
      var title = row.header;
      var width = title ? title.length : 0;
      wch = wch < width ? width : wch;
      var cell = { v: title, t: 's', s: headerStyle };
      if (!noBorders) {
        cell.s = _extends({}, cell.s, border);
      }
      worksheet[cellRef] = cell;
    });
    cols.unshift({ wch: wch });
  }
  worksheet['!cols'] = cols;
  worksheet['!merges'] = merges;

  var createCell = function createCell(value, colIndex, rowIndex) {
    var cellRowIndex = rowIndex + rowOffset;
    var cellColIndex = colIndex + colOffset;
    var cell = { v: value, s: dataStyle };
    if (!noBorders) {
      cell.s = _extends({}, cell.s, border);
    }
    var cellRef = _xlsxStyles2.default.utils.encode_cell({ c: cellColIndex, r: cellRowIndex });
    switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {
      case 'number':
        {
          cell.t = 'n';
          break;
        }
      case 'boolean':
        {
          cell.t = 'b';
          break;
        }
      default:
        {
          cell.t = 's';
          break;
        }
    }
    worksheet[cellRef] = cell;
  };

  var formatCell = function formatCell(value, column, row) {
    var disableValueRenderInExcel = column.disableValueRenderInExcel,
        multiplier = column.multiplier,
        valueRender = column.valueRender;

    var cellValue = multiplier && typeof value === 'number' ? multiplier * value : value;
    if (valueRender && !disableValueRenderInExcel) {
      cellValue = valueRender(row);
    } else if (formatter) {
      cellValue = formatter(cellValue);
    }
    return cellValue;
  };

  var detailedColumns = columnTitles.length > 0 ? columnTitles[rowOffset - 1] : [];
  var endColumnIndex = 0;
  if (detailedColumns.length > 0) {
    data.forEach(function (row, rowIndex) {
      detailedColumns.forEach(function (column, colIndex) {
        var cellValue = formatCell(row.getIn ? row.getIn(column.valueKeyPath) : row[column.valueKeyPath], column, row);
        createCell(cellValue, colIndex, rowIndex);
      });
    });
    endColumnIndex = detailedColumns.length + colOffset;
  } else {
    data.forEach(function (row, rowIndex) {
      row.forEach(function (column, colIndex) {
        var cellValue = formatCell(column.value, column, row);
        createCell(cellValue, colIndex, rowIndex);
        var currentColIndex = colIndex + colOffset;
        endColumnIndex = endColumnIndex < currentColIndex ? currentColIndex : endColumnIndex;
        cols.push({ wch: 50 });
      });
    });
  }
  var endRowIndex = (data.length || data.size) + rowOffset;
  var range = {
    s: {
      c: 0,
      r: 0
    },
    e: {
      c: endColumnIndex,
      r: endRowIndex
    }
  };
  if (range.e.c < EXCEL_MAX_COL_COUNT && range.e.r < EXCEL_MAX_ROW_COUNT) {
    worksheet['!ref'] = _xlsxStyles2.default.utils.encode_range(range);
  }

  return worksheet;
};

exports.default = function (sheets, fileName) {
  var workbook = { SheetNames: [], Sheets: {} };

  sheets.forEach(function (sheet, index) {
    var sheetName = sheet.name || 'Sheet ' + (index + 1);
    workbook.SheetNames.push(sheetName);
    var wsSheet = createDataSheet(sheet);
    workbook.Sheets[sheetName] = wsSheet;
  });

  var wbout = _xlsxStyles2.default.write(workbook, writeOptions);
  function s2ab(s) {
    var buf = new ArrayBuffer(s.length);
    var view = new Uint8Array(buf);
    for (var i = 0; i !== s.length; ++i) {
      view[i] = s.charCodeAt(i) & 0xFF;
    }
    return buf;
  }

  /* the saveAs call downloads a file on the local machine */
  (0, _fileSaver2.default)(new Blob([s2ab(wbout)], { type: '' }), fileName + '.xlsx');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHlsZWQtZXhjZWwtZXhwb3J0LmpzIl0sIm5hbWVzIjpbIndyaXRlT3B0aW9ucyIsInR5cGUiLCJib29rU1NUIiwiYm9va1R5cGUiLCJzaG93R3JpZExpbmVzIiwiRVhDRUxfTUFYX1JPV19DT1VOVCIsIkVYQ0VMX01BWF9DT0xfQ09VTlQiLCJib3JkZXJTdHlsZSIsInN0eWxlIiwiY29sb3IiLCJyZ2IiLCJib3JkZXIiLCJ0b3AiLCJib3R0b20iLCJsZWZ0IiwicmlnaHQiLCJjcmVhdGVDb2x1bW5UaXRsZXMiLCJjb2x1bW5zIiwiY29sT2Zmc2V0IiwiaGVhZGVyU3R5bGUiLCJub0JvcmRlcnMiLCJjZWxscyIsInJvd0luZGV4Iiwicm93IiwiZm9yRWFjaCIsImNvbHVtbiIsImNvbEluZGV4IiwiY2VsbEluZGV4IiwiQXJyYXkiLCJpc0FycmF5IiwiY2VsbFZhbHVlIiwiaGVhZGVyIiwiY2VsbCIsInYiLCJ0IiwicyIsImNlbGxSZWYiLCJYTFNYIiwidXRpbHMiLCJlbmNvZGVfY2VsbCIsImMiLCJyIiwiY2VsbERhdGEiLCJtZXJnZSIsImUiLCJ1cHBlckNlbGwiLCJ1bmRlZmluZWQiLCJ2YWx1ZUtleVBhdGgiLCJ2YWx1ZVJlbmRlciIsImRpc2FibGVWYWx1ZVJlbmRlckluRXhjZWwiLCJ2YWx1ZU9wdGlvbnMiLCJtdWx0aXBsaWVyIiwid2NoIiwibGVuZ3RoIiwicHVzaCIsImNyZWF0ZURhdGFTaGVldCIsImV4cG9ydERhdGEiLCJkYXRhIiwiZGF0YVN0eWxlIiwiZm9ybWF0dGVyIiwicm93cyIsIndvcmtzaGVldCIsImNvbHVtblRpdGxlcyIsInJvd09mZnNldCIsIm1lcmdlcyIsImNvbHMiLCJjb2x1bW5Sb3ciLCJjb2x1bW5UaXRsZSIsImNlbGxSb3dJbmRleCIsInRpdGxlIiwid2lkdGgiLCJ1bnNoaWZ0IiwiY3JlYXRlQ2VsbCIsInZhbHVlIiwiY2VsbENvbEluZGV4IiwiZm9ybWF0Q2VsbCIsImRldGFpbGVkQ29sdW1ucyIsImVuZENvbHVtbkluZGV4IiwiZ2V0SW4iLCJjdXJyZW50Q29sSW5kZXgiLCJlbmRSb3dJbmRleCIsInNpemUiLCJyYW5nZSIsImVuY29kZV9yYW5nZSIsInNoZWV0cyIsImZpbGVOYW1lIiwid29ya2Jvb2siLCJTaGVldE5hbWVzIiwiU2hlZXRzIiwic2hlZXQiLCJpbmRleCIsInNoZWV0TmFtZSIsIm5hbWUiLCJ3c1NoZWV0Iiwid2JvdXQiLCJ3cml0ZSIsInMyYWIiLCJidWYiLCJBcnJheUJ1ZmZlciIsInZpZXciLCJVaW50OEFycmF5IiwiaSIsImNoYXJDb2RlQXQiLCJCbG9iIl0sIm1hcHBpbmdzIjoiOzs7Ozs7a1FBQUE7QUFDQTtBQUNBOzs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFNQSxlQUFlO0FBQ25CQyxRQUFNLFFBRGE7QUFFbkJDLFdBQVMsS0FGVTtBQUduQkMsWUFBVSxNQUhTO0FBSW5CQyxpQkFBZTtBQUpJLENBQXJCOztBQU9BLElBQU1DLHNCQUFzQixPQUE1QjtBQUNBLElBQU1DLHNCQUFzQixLQUE1Qjs7QUFFQTtBQUNBLElBQU1DLGNBQWMsRUFBRUMsT0FBTyxNQUFULEVBQWlCQyxPQUFPLEVBQUVDLEtBQUssUUFBUCxFQUF4QixFQUFwQjtBQUNBLElBQU1DLFNBQVM7QUFDYkEsVUFBUTtBQUNOQyxTQUFLTCxXQURDO0FBRU5NLFlBQVFOLFdBRkY7QUFHTk8sVUFBTVAsV0FIQTtBQUlOUSxXQUFPUjtBQUpEO0FBREssQ0FBZjs7QUFTQSxJQUFNUyxxQkFBcUIsU0FBckJBLGtCQUFxQixHQU90QjtBQUFBLE1BTkhDLE9BTUcsdUVBTk8sRUFNUDtBQUFBLE1BTEhDLFNBS0c7QUFBQSxNQUpIQyxXQUlHO0FBQUEsTUFISEMsU0FHRyx1RUFIUyxLQUdUO0FBQUEsTUFGSEMsS0FFRyx1RUFGSyxFQUVMO0FBQUEsTUFESEMsUUFDRyx1RUFEUSxDQUNSOztBQUNILE1BQU1DLE1BQU0sRUFBWjtBQUNBTixVQUFRTyxPQUFSLENBQWdCLFVBQUNDLE1BQUQsRUFBU0MsUUFBVCxFQUFzQjtBQUNwQyxRQUFNQyxZQUFZVCxZQUFZUSxRQUE5QjtBQUNBLFFBQUlFLE1BQU1DLE9BQU4sQ0FBY0osTUFBZCxDQUFKLEVBQTJCO0FBQ3pCLGFBQU9ULG1CQUFtQlMsTUFBbkIsRUFBMkJQLFNBQTNCLEVBQXNDQyxXQUF0QyxFQUFtREMsU0FBbkQsRUFBOERDLEtBQTlELEVBQXFFSyxRQUFyRSxDQUFQO0FBQ0Q7QUFDRCxRQUFNSSxZQUFZLENBQUNMLFVBQVUsRUFBWCxFQUFlTSxNQUFmLElBQXlCLEVBQTNDO0FBQ0EsUUFBTUMsT0FBTyxFQUFFQyxHQUFHSCxTQUFMLEVBQWdCSSxHQUFHLEdBQW5CLEVBQXdCQyxHQUFHaEIsV0FBM0IsRUFBYjtBQUNBLFFBQUksQ0FBQ0MsU0FBTCxFQUFnQjtBQUNkWSxXQUFLRyxDQUFMLGdCQUFjSCxLQUFLRyxDQUFuQixFQUF5QnhCLE1BQXpCO0FBQ0Q7QUFDRCxRQUFNeUIsVUFBVUMscUJBQUtDLEtBQUwsQ0FBV0MsV0FBWCxDQUF1QixFQUFFQyxHQUFHYixTQUFMLEVBQWdCYyxHQUFHbkIsUUFBbkIsRUFBdkIsQ0FBaEI7QUFDQSxRQUFNb0IsV0FBVyxFQUFFVixVQUFGLEVBQVFJLGdCQUFSLEVBQWpCO0FBQ0EsUUFBSVgsVUFBVUEsT0FBT2tCLEtBQVAsR0FBZSxDQUE3QixFQUFnQztBQUM5QkQsZUFBU0MsS0FBVCxHQUFpQjtBQUNmUixXQUFHO0FBQ0RLLGFBQUdiLFNBREY7QUFFRGMsYUFBR25CO0FBRkYsU0FEWTtBQUtmc0IsV0FBRztBQUNESixhQUFHYixhQUFhRixPQUFPa0IsS0FBUCxHQUFlLENBQTVCLENBREY7QUFFREYsYUFBR25CO0FBRkY7QUFMWSxPQUFqQjtBQVVEO0FBQ0QsUUFBTXVCLFlBQVl2QixXQUFXLENBQVgsR0FBZUQsTUFBTUMsV0FBVyxDQUFqQixFQUFvQkksUUFBcEIsQ0FBZixHQUErQ29CLFNBQWpFO0FBQ0EsUUFBSXJCLFVBQVVBLE9BQU9zQixZQUFyQixFQUFtQztBQUNqQ0wsZUFBU0ssWUFBVCxHQUF3QnRCLE9BQU9zQixZQUEvQjtBQUNBTCxlQUFTTSxXQUFULEdBQXVCdkIsT0FBT3VCLFdBQTlCO0FBQ0FOLGVBQVNPLHlCQUFULEdBQXFDeEIsT0FBT3dCLHlCQUE1QztBQUNBLFVBQUl4QixPQUFPeUIsWUFBUCxJQUF1QnpCLE9BQU95QixZQUFQLENBQW9CQyxVQUEvQyxFQUEyRDtBQUN6RFQsaUJBQVNTLFVBQVQsR0FBc0IxQixPQUFPeUIsWUFBUCxDQUFvQkMsVUFBMUM7QUFDRDtBQUNGLEtBUEQsTUFPTyxJQUFJN0IsV0FBVyxDQUFmLEVBQWtCO0FBQ3ZCb0IsZUFBU0ssWUFBVCxHQUF3QkYsVUFBVUUsWUFBbEM7QUFDRDtBQUNELFFBQU1LLE1BQU1QLGFBQWEsQ0FBQ0EsVUFBVUYsS0FBeEIsSUFBaUNFLFVBQVVPLEdBQVYsR0FBZ0J0QixVQUFVdUIsTUFBM0QsR0FDUlIsVUFBVU8sR0FERixHQUVSdEIsVUFBVXVCLE1BRmQ7QUFHQVgsYUFBU1UsR0FBVCxHQUFlQSxHQUFmO0FBQ0E3QixRQUFJK0IsSUFBSixDQUFTWixRQUFUO0FBQ0QsR0F4Q0Q7QUF5Q0EsTUFBSW5CLElBQUk4QixNQUFKLEdBQWEsQ0FBakIsRUFBb0I7QUFDbEJoQyxVQUFNaUMsSUFBTixDQUFXL0IsR0FBWDtBQUNEO0FBQ0QsU0FBT0YsS0FBUDtBQUNELENBdEREOztBQXdEQSxJQUFNa0Msa0JBQWtCLFNBQWxCQSxlQUFrQixDQUFDQyxVQUFELEVBQWdCO0FBQUEsTUFFcEN2QyxPQUZvQyxHQVNsQ3VDLFVBVGtDLENBRXBDdkMsT0FGb0M7QUFBQSx5QkFTbEN1QyxVQVRrQyxDQUdwQ0MsSUFIb0M7QUFBQSxNQUdwQ0EsSUFIb0Msb0NBRzdCLEVBSDZCO0FBQUEsTUFJcENDLFNBSm9DLEdBU2xDRixVQVRrQyxDQUlwQ0UsU0FKb0M7QUFBQSxNQUtwQ0MsU0FMb0MsR0FTbENILFVBVGtDLENBS3BDRyxTQUxvQztBQUFBLE1BTXBDeEMsV0FOb0MsR0FTbENxQyxVQVRrQyxDQU1wQ3JDLFdBTm9DO0FBQUEsTUFPcENDLFNBUG9DLEdBU2xDb0MsVUFUa0MsQ0FPcENwQyxTQVBvQztBQUFBLE1BUXBDd0MsSUFSb0MsR0FTbENKLFVBVGtDLENBUXBDSSxJQVJvQzs7QUFVdEMsTUFBTUMsWUFBWSxFQUFsQjtBQUNBLE1BQU0zQyxZQUFZMEMsUUFBUUEsS0FBS1AsTUFBTCxHQUFjLENBQXRCLEdBQTBCLENBQTFCLEdBQThCLENBQWhEO0FBQ0EsTUFBTVMsZUFBZTlDLG1CQUFtQkMsT0FBbkIsRUFBNEJDLFNBQTVCLEVBQXVDQyxXQUF2QyxFQUFvREMsU0FBcEQsQ0FBckI7QUFDQSxNQUFNMkMsWUFBWUQsYUFBYVQsTUFBL0I7O0FBRUEsTUFBTVcsU0FBUyxFQUFmO0FBQ0EsTUFBSUosUUFBUUEsS0FBS1AsTUFBTCxHQUFjLENBQXRCLElBQTJCVSxZQUFZLENBQTNDLEVBQThDO0FBQzVDQyxXQUFPVixJQUFQLENBQVksRUFBRW5CLEdBQUcsRUFBRUssR0FBRyxDQUFMLEVBQVFDLEdBQUcsQ0FBWCxFQUFMLEVBQXFCRyxHQUFHLEVBQUVKLEdBQUcsQ0FBTCxFQUFRQyxHQUFHc0IsWUFBWSxDQUF2QixFQUF4QixFQUFaO0FBQ0Q7O0FBRUQsTUFBTUUsT0FBTyxFQUFiOztBQUVBSCxlQUFhdEMsT0FBYixDQUFxQjtBQUFBLFdBQ25CMEMsVUFBVTFDLE9BQVYsQ0FBa0IsVUFBQzJDLFdBQUQsRUFBY3pDLFFBQWQsRUFBMkI7QUFDM0NtQyxnQkFBVU0sWUFBWS9CLE9BQXRCLElBQWlDK0IsWUFBWW5DLElBQTdDO0FBQ0EsVUFBSW1DLFlBQVl4QixLQUFoQixFQUF1QjtBQUNyQnFCLGVBQU9WLElBQVAsQ0FBWWEsWUFBWXhCLEtBQXhCO0FBQ0Q7QUFDRHNCLFdBQUt2QyxRQUFMLElBQWlCLEVBQUUwQixLQUFLZSxZQUFZZixHQUFuQixFQUFqQjtBQUNELEtBTkQsQ0FEbUI7QUFBQSxHQUFyQjs7QUFVQSxNQUFJUSxJQUFKLEVBQVU7QUFDUixRQUFJUixNQUFNLENBQVY7QUFDQVEsU0FBS3BDLE9BQUwsQ0FBYSxVQUFDRCxHQUFELEVBQU1ELFFBQU4sRUFBbUI7QUFDOUIsVUFBTThDLGVBQWU5QyxXQUFXeUMsU0FBaEM7QUFDQSxVQUFNM0IsVUFBVUMscUJBQUtDLEtBQUwsQ0FBV0MsV0FBWCxDQUF1QixFQUFFQyxHQUFHLENBQUwsRUFBUUMsR0FBRzJCLFlBQVgsRUFBdkIsQ0FBaEI7QUFDQSxVQUFNQyxRQUFROUMsSUFBSVEsTUFBbEI7QUFDQSxVQUFNdUMsUUFBUUQsUUFBUUEsTUFBTWhCLE1BQWQsR0FBdUIsQ0FBckM7QUFDQUQsWUFBTUEsTUFBTWtCLEtBQU4sR0FBY0EsS0FBZCxHQUFzQmxCLEdBQTVCO0FBQ0EsVUFBTXBCLE9BQU8sRUFBRUMsR0FBR29DLEtBQUwsRUFBWW5DLEdBQUcsR0FBZixFQUFvQkMsR0FBR2hCLFdBQXZCLEVBQWI7QUFDQSxVQUFJLENBQUNDLFNBQUwsRUFBZ0I7QUFDZFksYUFBS0csQ0FBTCxnQkFBY0gsS0FBS0csQ0FBbkIsRUFBeUJ4QixNQUF6QjtBQUNEO0FBQ0RrRCxnQkFBVXpCLE9BQVYsSUFBcUJKLElBQXJCO0FBQ0QsS0FYRDtBQVlBaUMsU0FBS00sT0FBTCxDQUFhLEVBQUVuQixRQUFGLEVBQWI7QUFDRDtBQUNEUyxZQUFVLE9BQVYsSUFBcUJJLElBQXJCO0FBQ0FKLFlBQVUsU0FBVixJQUF1QkcsTUFBdkI7O0FBRUEsTUFBTVEsYUFBYSxTQUFiQSxVQUFhLENBQUNDLEtBQUQsRUFBUS9DLFFBQVIsRUFBa0JKLFFBQWxCLEVBQStCO0FBQ2hELFFBQU04QyxlQUFlOUMsV0FBV3lDLFNBQWhDO0FBQ0EsUUFBTVcsZUFBZWhELFdBQVdSLFNBQWhDO0FBQ0EsUUFBTWMsT0FBTyxFQUFFQyxHQUFHd0MsS0FBTCxFQUFZdEMsR0FBR3VCLFNBQWYsRUFBYjtBQUNBLFFBQUksQ0FBQ3RDLFNBQUwsRUFBZ0I7QUFDZFksV0FBS0csQ0FBTCxnQkFBY0gsS0FBS0csQ0FBbkIsRUFBeUJ4QixNQUF6QjtBQUNEO0FBQ0QsUUFBTXlCLFVBQVVDLHFCQUFLQyxLQUFMLENBQVdDLFdBQVgsQ0FBdUIsRUFBRUMsR0FBR2tDLFlBQUwsRUFBbUJqQyxHQUFHMkIsWUFBdEIsRUFBdkIsQ0FBaEI7QUFDQSxtQkFBZUssS0FBZix5Q0FBZUEsS0FBZjtBQUNFLFdBQU0sUUFBTjtBQUFpQjtBQUNmekMsZUFBS0UsQ0FBTCxHQUFTLEdBQVQ7QUFDQTtBQUNEO0FBQ0QsV0FBTSxTQUFOO0FBQWtCO0FBQ2hCRixlQUFLRSxDQUFMLEdBQVMsR0FBVDtBQUNBO0FBQ0Q7QUFDRDtBQUFTO0FBQ1BGLGVBQUtFLENBQUwsR0FBUyxHQUFUO0FBQ0E7QUFDRDtBQVpIO0FBY0EyQixjQUFVekIsT0FBVixJQUFxQkosSUFBckI7QUFDRCxHQXZCRDs7QUF5QkEsTUFBTTJDLGFBQWEsU0FBYkEsVUFBYSxDQUFDRixLQUFELEVBQVFoRCxNQUFSLEVBQWdCRixHQUFoQixFQUF3QjtBQUFBLFFBQ2pDMEIseUJBRGlDLEdBQ3NCeEIsTUFEdEIsQ0FDakN3Qix5QkFEaUM7QUFBQSxRQUNORSxVQURNLEdBQ3NCMUIsTUFEdEIsQ0FDTjBCLFVBRE07QUFBQSxRQUNNSCxXQUROLEdBQ3NCdkIsTUFEdEIsQ0FDTXVCLFdBRE47O0FBRXpDLFFBQUlsQixZQUFZcUIsY0FBYyxPQUFPc0IsS0FBUCxLQUFpQixRQUEvQixHQUEwQ3RCLGFBQWFzQixLQUF2RCxHQUErREEsS0FBL0U7QUFDQSxRQUFJekIsZUFBZSxDQUFDQyx5QkFBcEIsRUFBK0M7QUFDN0NuQixrQkFBWWtCLFlBQVl6QixHQUFaLENBQVo7QUFDRCxLQUZELE1BRU8sSUFBSW9DLFNBQUosRUFBZTtBQUNwQjdCLGtCQUFZNkIsVUFBVTdCLFNBQVYsQ0FBWjtBQUNEO0FBQ0QsV0FBT0EsU0FBUDtBQUNELEdBVEQ7O0FBV0EsTUFBTThDLGtCQUFrQmQsYUFBYVQsTUFBYixHQUFzQixDQUF0QixHQUEwQlMsYUFBYUMsWUFBWSxDQUF6QixDQUExQixHQUF3RCxFQUFoRjtBQUNBLE1BQUljLGlCQUFpQixDQUFyQjtBQUNBLE1BQUlELGdCQUFnQnZCLE1BQWhCLEdBQXlCLENBQTdCLEVBQWdDO0FBQzlCSSxTQUFLakMsT0FBTCxDQUFhLFVBQUNELEdBQUQsRUFBTUQsUUFBTixFQUFtQjtBQUM5QnNELHNCQUFnQnBELE9BQWhCLENBQXdCLFVBQUNDLE1BQUQsRUFBU0MsUUFBVCxFQUFzQjtBQUM1QyxZQUFNSSxZQUFZNkMsV0FBV3BELElBQUl1RCxLQUFKLEdBQ3pCdkQsSUFBSXVELEtBQUosQ0FBVXJELE9BQU9zQixZQUFqQixDQUR5QixHQUV6QnhCLElBQUlFLE9BQU9zQixZQUFYLENBRmMsRUFFWXRCLE1BRlosRUFFb0JGLEdBRnBCLENBQWxCO0FBR0FpRCxtQkFBVzFDLFNBQVgsRUFBc0JKLFFBQXRCLEVBQWdDSixRQUFoQztBQUNELE9BTEQ7QUFNRCxLQVBEO0FBUUF1RCxxQkFBaUJELGdCQUFnQnZCLE1BQWhCLEdBQXlCbkMsU0FBMUM7QUFDRCxHQVZELE1BVU87QUFDTHVDLFNBQUtqQyxPQUFMLENBQWEsVUFBQ0QsR0FBRCxFQUFNRCxRQUFOLEVBQW1CO0FBQzlCQyxVQUFJQyxPQUFKLENBQVksVUFBQ0MsTUFBRCxFQUFTQyxRQUFULEVBQXNCO0FBQ2hDLFlBQU1JLFlBQVk2QyxXQUFXbEQsT0FBT2dELEtBQWxCLEVBQXlCaEQsTUFBekIsRUFBaUNGLEdBQWpDLENBQWxCO0FBQ0FpRCxtQkFBVzFDLFNBQVgsRUFBc0JKLFFBQXRCLEVBQWdDSixRQUFoQztBQUNBLFlBQU15RCxrQkFBa0JyRCxXQUFXUixTQUFuQztBQUNBMkQseUJBQWlCQSxpQkFBaUJFLGVBQWpCLEdBQW1DQSxlQUFuQyxHQUFxREYsY0FBdEU7QUFDQVosYUFBS1gsSUFBTCxDQUFVLEVBQUVGLEtBQUssRUFBUCxFQUFWO0FBQ0QsT0FORDtBQU9ELEtBUkQ7QUFTRDtBQUNELE1BQU00QixjQUFjLENBQUN2QixLQUFLSixNQUFMLElBQWVJLEtBQUt3QixJQUFyQixJQUE2QmxCLFNBQWpEO0FBQ0EsTUFBTW1CLFFBQVE7QUFDWi9DLE9BQUc7QUFDREssU0FBRyxDQURGO0FBRURDLFNBQUc7QUFGRixLQURTO0FBS1pHLE9BQUc7QUFDREosU0FBR3FDLGNBREY7QUFFRHBDLFNBQUd1QztBQUZGO0FBTFMsR0FBZDtBQVVBLE1BQUlFLE1BQU10QyxDQUFOLENBQVFKLENBQVIsR0FBWWxDLG1CQUFaLElBQW1DNEUsTUFBTXRDLENBQU4sQ0FBUUgsQ0FBUixHQUFZcEMsbUJBQW5ELEVBQXdFO0FBQ3RFd0QsY0FBVSxNQUFWLElBQW9CeEIscUJBQUtDLEtBQUwsQ0FBVzZDLFlBQVgsQ0FBd0JELEtBQXhCLENBQXBCO0FBQ0Q7O0FBRUQsU0FBT3JCLFNBQVA7QUFDRCxDQTlIRDs7a0JBZ0llLFVBQUN1QixNQUFELEVBQVNDLFFBQVQsRUFBc0I7QUFDbkMsTUFBTUMsV0FBVyxFQUFFQyxZQUFZLEVBQWQsRUFBa0JDLFFBQVEsRUFBMUIsRUFBakI7O0FBRUFKLFNBQU81RCxPQUFQLENBQWUsVUFBQ2lFLEtBQUQsRUFBUUMsS0FBUixFQUFrQjtBQUMvQixRQUFNQyxZQUFZRixNQUFNRyxJQUFOLGdCQUF1QkYsUUFBUSxDQUEvQixDQUFsQjtBQUNBSixhQUFTQyxVQUFULENBQW9CakMsSUFBcEIsQ0FBeUJxQyxTQUF6QjtBQUNBLFFBQU1FLFVBQVV0QyxnQkFBZ0JrQyxLQUFoQixDQUFoQjtBQUNBSCxhQUFTRSxNQUFULENBQWdCRyxTQUFoQixJQUE2QkUsT0FBN0I7QUFDRCxHQUxEOztBQU9BLE1BQU1DLFFBQVF6RCxxQkFBSzBELEtBQUwsQ0FBV1QsUUFBWCxFQUFxQnRGLFlBQXJCLENBQWQ7QUFDQSxXQUFTZ0csSUFBVCxDQUFjN0QsQ0FBZCxFQUFpQjtBQUNmLFFBQU04RCxNQUFNLElBQUlDLFdBQUosQ0FBZ0IvRCxFQUFFa0IsTUFBbEIsQ0FBWjtBQUNBLFFBQU04QyxPQUFPLElBQUlDLFVBQUosQ0FBZUgsR0FBZixDQUFiO0FBQ0EsU0FBSyxJQUFJSSxJQUFJLENBQWIsRUFBZ0JBLE1BQU1sRSxFQUFFa0IsTUFBeEIsRUFBZ0MsRUFBRWdELENBQWxDLEVBQXFDO0FBQ25DRixXQUFLRSxDQUFMLElBQVVsRSxFQUFFbUUsVUFBRixDQUFhRCxDQUFiLElBQWtCLElBQTVCO0FBQ0Q7QUFDRCxXQUFPSixHQUFQO0FBQ0Q7O0FBRUQ7QUFDQSwyQkFBTyxJQUFJTSxJQUFKLENBQVMsQ0FBQ1AsS0FBS0YsS0FBTCxDQUFELENBQVQsRUFBd0IsRUFBRTdGLE1BQU0sRUFBUixFQUF4QixDQUFQLEVBQWlEb0YsUUFBakQ7QUFDRCxDIiwiZmlsZSI6InN0eWxlZC1leGNlbC1leHBvcnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBjb25zaXN0ZW50LXJldHVybiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcGx1c3BsdXMgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cbmltcG9ydCBYTFNYIGZyb20gJ3hsc3gtc3R5bGVzJztcbmltcG9ydCBzYXZlQXMgZnJvbSAnZmlsZS1zYXZlcic7XG5cbmNvbnN0IHdyaXRlT3B0aW9ucyA9IHtcbiAgdHlwZTogJ2JpbmFyeScsXG4gIGJvb2tTU1Q6IGZhbHNlLFxuICBib29rVHlwZTogJ3hsc3gnLFxuICBzaG93R3JpZExpbmVzOiBmYWxzZSxcbn07XG5cbmNvbnN0IEVYQ0VMX01BWF9ST1dfQ09VTlQgPSAxMDQ4NTc2O1xuY29uc3QgRVhDRUxfTUFYX0NPTF9DT1VOVCA9IDE2Mzg0O1xuXG4vLyBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS94bHN4LXN0eWxlcyNjZWxsLXN0eWxlc1xuY29uc3QgYm9yZGVyU3R5bGUgPSB7IHN0eWxlOiAndGhpbicsIGNvbG9yOiB7IHJnYjogJ0NDQ0NDQycgfSB9O1xuY29uc3QgYm9yZGVyID0ge1xuICBib3JkZXI6IHtcbiAgICB0b3A6IGJvcmRlclN0eWxlLFxuICAgIGJvdHRvbTogYm9yZGVyU3R5bGUsXG4gICAgbGVmdDogYm9yZGVyU3R5bGUsXG4gICAgcmlnaHQ6IGJvcmRlclN0eWxlLFxuICB9LFxufTtcblxuY29uc3QgY3JlYXRlQ29sdW1uVGl0bGVzID0gKFxuICBjb2x1bW5zID0gW10sXG4gIGNvbE9mZnNldCxcbiAgaGVhZGVyU3R5bGUsXG4gIG5vQm9yZGVycyA9IGZhbHNlLFxuICBjZWxscyA9IFtdLFxuICByb3dJbmRleCA9IDAsXG4pID0+IHtcbiAgY29uc3Qgcm93ID0gW107XG4gIGNvbHVtbnMuZm9yRWFjaCgoY29sdW1uLCBjb2xJbmRleCkgPT4ge1xuICAgIGNvbnN0IGNlbGxJbmRleCA9IGNvbE9mZnNldCArIGNvbEluZGV4O1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNvbHVtbikpIHtcbiAgICAgIHJldHVybiBjcmVhdGVDb2x1bW5UaXRsZXMoY29sdW1uLCBjb2xPZmZzZXQsIGhlYWRlclN0eWxlLCBub0JvcmRlcnMsIGNlbGxzLCBjb2xJbmRleCk7XG4gICAgfVxuICAgIGNvbnN0IGNlbGxWYWx1ZSA9IChjb2x1bW4gfHwge30pLmhlYWRlciB8fCAnJztcbiAgICBjb25zdCBjZWxsID0geyB2OiBjZWxsVmFsdWUsIHQ6ICdzJywgczogaGVhZGVyU3R5bGUgfTtcbiAgICBpZiAoIW5vQm9yZGVycykge1xuICAgICAgY2VsbC5zID0geyAuLi5jZWxsLnMsIC4uLmJvcmRlciB9O1xuICAgIH1cbiAgICBjb25zdCBjZWxsUmVmID0gWExTWC51dGlscy5lbmNvZGVfY2VsbCh7IGM6IGNlbGxJbmRleCwgcjogcm93SW5kZXggfSk7XG4gICAgY29uc3QgY2VsbERhdGEgPSB7IGNlbGwsIGNlbGxSZWYgfTtcbiAgICBpZiAoY29sdW1uICYmIGNvbHVtbi5tZXJnZSA+IDEpIHtcbiAgICAgIGNlbGxEYXRhLm1lcmdlID0ge1xuICAgICAgICBzOiB7XG4gICAgICAgICAgYzogY2VsbEluZGV4LFxuICAgICAgICAgIHI6IHJvd0luZGV4LFxuICAgICAgICB9LFxuICAgICAgICBlOiB7XG4gICAgICAgICAgYzogY2VsbEluZGV4ICsgKGNvbHVtbi5tZXJnZSAtIDEpLFxuICAgICAgICAgIHI6IHJvd0luZGV4LFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgdXBwZXJDZWxsID0gcm93SW5kZXggPiAwID8gY2VsbHNbcm93SW5kZXggLSAxXVtjb2xJbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgaWYgKGNvbHVtbiAmJiBjb2x1bW4udmFsdWVLZXlQYXRoKSB7XG4gICAgICBjZWxsRGF0YS52YWx1ZUtleVBhdGggPSBjb2x1bW4udmFsdWVLZXlQYXRoO1xuICAgICAgY2VsbERhdGEudmFsdWVSZW5kZXIgPSBjb2x1bW4udmFsdWVSZW5kZXI7XG4gICAgICBjZWxsRGF0YS5kaXNhYmxlVmFsdWVSZW5kZXJJbkV4Y2VsID0gY29sdW1uLmRpc2FibGVWYWx1ZVJlbmRlckluRXhjZWw7XG4gICAgICBpZiAoY29sdW1uLnZhbHVlT3B0aW9ucyAmJiBjb2x1bW4udmFsdWVPcHRpb25zLm11bHRpcGxpZXIpIHtcbiAgICAgICAgY2VsbERhdGEubXVsdGlwbGllciA9IGNvbHVtbi52YWx1ZU9wdGlvbnMubXVsdGlwbGllcjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJvd0luZGV4ID4gMCkge1xuICAgICAgY2VsbERhdGEudmFsdWVLZXlQYXRoID0gdXBwZXJDZWxsLnZhbHVlS2V5UGF0aDtcbiAgICB9XG4gICAgY29uc3Qgd2NoID0gdXBwZXJDZWxsICYmICF1cHBlckNlbGwubWVyZ2UgJiYgdXBwZXJDZWxsLndjaCA+IGNlbGxWYWx1ZS5sZW5ndGhcbiAgICAgID8gdXBwZXJDZWxsLndjaFxuICAgICAgOiBjZWxsVmFsdWUubGVuZ3RoO1xuICAgIGNlbGxEYXRhLndjaCA9IHdjaDtcbiAgICByb3cucHVzaChjZWxsRGF0YSk7XG4gIH0pO1xuICBpZiAocm93Lmxlbmd0aCA+IDApIHtcbiAgICBjZWxscy5wdXNoKHJvdyk7XG4gIH1cbiAgcmV0dXJuIGNlbGxzO1xufTtcblxuY29uc3QgY3JlYXRlRGF0YVNoZWV0ID0gKGV4cG9ydERhdGEpID0+IHtcbiAgY29uc3Qge1xuICAgIGNvbHVtbnMsXG4gICAgZGF0YSA9IFtdLFxuICAgIGRhdGFTdHlsZSxcbiAgICBmb3JtYXR0ZXIsXG4gICAgaGVhZGVyU3R5bGUsXG4gICAgbm9Cb3JkZXJzLFxuICAgIHJvd3MsXG4gIH0gPSBleHBvcnREYXRhO1xuICBjb25zdCB3b3Jrc2hlZXQgPSB7fTtcbiAgY29uc3QgY29sT2Zmc2V0ID0gcm93cyAmJiByb3dzLmxlbmd0aCA+IDAgPyAxIDogMDtcbiAgY29uc3QgY29sdW1uVGl0bGVzID0gY3JlYXRlQ29sdW1uVGl0bGVzKGNvbHVtbnMsIGNvbE9mZnNldCwgaGVhZGVyU3R5bGUsIG5vQm9yZGVycyk7XG4gIGNvbnN0IHJvd09mZnNldCA9IGNvbHVtblRpdGxlcy5sZW5ndGg7XG5cbiAgY29uc3QgbWVyZ2VzID0gW107XG4gIGlmIChyb3dzICYmIHJvd3MubGVuZ3RoID4gMCAmJiByb3dPZmZzZXQgPiAxKSB7XG4gICAgbWVyZ2VzLnB1c2goeyBzOiB7IGM6IDAsIHI6IDAgfSwgZTogeyBjOiAwLCByOiByb3dPZmZzZXQgLSAxIH0gfSk7XG4gIH1cblxuICBjb25zdCBjb2xzID0gW107XG5cbiAgY29sdW1uVGl0bGVzLmZvckVhY2goY29sdW1uUm93ID0+IChcbiAgICBjb2x1bW5Sb3cuZm9yRWFjaCgoY29sdW1uVGl0bGUsIGNvbEluZGV4KSA9PiB7XG4gICAgICB3b3Jrc2hlZXRbY29sdW1uVGl0bGUuY2VsbFJlZl0gPSBjb2x1bW5UaXRsZS5jZWxsO1xuICAgICAgaWYgKGNvbHVtblRpdGxlLm1lcmdlKSB7XG4gICAgICAgIG1lcmdlcy5wdXNoKGNvbHVtblRpdGxlLm1lcmdlKTtcbiAgICAgIH1cbiAgICAgIGNvbHNbY29sSW5kZXhdID0geyB3Y2g6IGNvbHVtblRpdGxlLndjaCB9O1xuICAgIH0pXG4gICkpO1xuXG4gIGlmIChyb3dzKSB7XG4gICAgbGV0IHdjaCA9IDA7XG4gICAgcm93cy5mb3JFYWNoKChyb3csIHJvd0luZGV4KSA9PiB7XG4gICAgICBjb25zdCBjZWxsUm93SW5kZXggPSByb3dJbmRleCArIHJvd09mZnNldDtcbiAgICAgIGNvbnN0IGNlbGxSZWYgPSBYTFNYLnV0aWxzLmVuY29kZV9jZWxsKHsgYzogMCwgcjogY2VsbFJvd0luZGV4IH0pO1xuICAgICAgY29uc3QgdGl0bGUgPSByb3cuaGVhZGVyO1xuICAgICAgY29uc3Qgd2lkdGggPSB0aXRsZSA/IHRpdGxlLmxlbmd0aCA6IDA7XG4gICAgICB3Y2ggPSB3Y2ggPCB3aWR0aCA/IHdpZHRoIDogd2NoO1xuICAgICAgY29uc3QgY2VsbCA9IHsgdjogdGl0bGUsIHQ6ICdzJywgczogaGVhZGVyU3R5bGUgfTtcbiAgICAgIGlmICghbm9Cb3JkZXJzKSB7XG4gICAgICAgIGNlbGwucyA9IHsgLi4uY2VsbC5zLCAuLi5ib3JkZXIgfTtcbiAgICAgIH1cbiAgICAgIHdvcmtzaGVldFtjZWxsUmVmXSA9IGNlbGw7XG4gICAgfSk7XG4gICAgY29scy51bnNoaWZ0KHsgd2NoIH0pO1xuICB9XG4gIHdvcmtzaGVldFsnIWNvbHMnXSA9IGNvbHM7XG4gIHdvcmtzaGVldFsnIW1lcmdlcyddID0gbWVyZ2VzO1xuXG4gIGNvbnN0IGNyZWF0ZUNlbGwgPSAodmFsdWUsIGNvbEluZGV4LCByb3dJbmRleCkgPT4ge1xuICAgIGNvbnN0IGNlbGxSb3dJbmRleCA9IHJvd0luZGV4ICsgcm93T2Zmc2V0O1xuICAgIGNvbnN0IGNlbGxDb2xJbmRleCA9IGNvbEluZGV4ICsgY29sT2Zmc2V0O1xuICAgIGNvbnN0IGNlbGwgPSB7IHY6IHZhbHVlLCBzOiBkYXRhU3R5bGUgfTtcbiAgICBpZiAoIW5vQm9yZGVycykge1xuICAgICAgY2VsbC5zID0geyAuLi5jZWxsLnMsIC4uLmJvcmRlciB9O1xuICAgIH1cbiAgICBjb25zdCBjZWxsUmVmID0gWExTWC51dGlscy5lbmNvZGVfY2VsbCh7IGM6IGNlbGxDb2xJbmRleCwgcjogY2VsbFJvd0luZGV4IH0pO1xuICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICBjYXNlICgnbnVtYmVyJyk6IHtcbiAgICAgICAgY2VsbC50ID0gJ24nO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgKCdib29sZWFuJyk6IHtcbiAgICAgICAgY2VsbC50ID0gJ2InO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgY2VsbC50ID0gJ3MnO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgd29ya3NoZWV0W2NlbGxSZWZdID0gY2VsbDtcbiAgfTtcblxuICBjb25zdCBmb3JtYXRDZWxsID0gKHZhbHVlLCBjb2x1bW4sIHJvdykgPT4ge1xuICAgIGNvbnN0IHsgZGlzYWJsZVZhbHVlUmVuZGVySW5FeGNlbCwgbXVsdGlwbGllciwgdmFsdWVSZW5kZXIgfSA9IGNvbHVtbjtcbiAgICBsZXQgY2VsbFZhbHVlID0gbXVsdGlwbGllciAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInID8gbXVsdGlwbGllciAqIHZhbHVlIDogdmFsdWU7XG4gICAgaWYgKHZhbHVlUmVuZGVyICYmICFkaXNhYmxlVmFsdWVSZW5kZXJJbkV4Y2VsKSB7XG4gICAgICBjZWxsVmFsdWUgPSB2YWx1ZVJlbmRlcihyb3cpO1xuICAgIH0gZWxzZSBpZiAoZm9ybWF0dGVyKSB7XG4gICAgICBjZWxsVmFsdWUgPSBmb3JtYXR0ZXIoY2VsbFZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIGNlbGxWYWx1ZTtcbiAgfTtcblxuICBjb25zdCBkZXRhaWxlZENvbHVtbnMgPSBjb2x1bW5UaXRsZXMubGVuZ3RoID4gMCA/IGNvbHVtblRpdGxlc1tyb3dPZmZzZXQgLSAxXSA6IFtdO1xuICBsZXQgZW5kQ29sdW1uSW5kZXggPSAwO1xuICBpZiAoZGV0YWlsZWRDb2x1bW5zLmxlbmd0aCA+IDApIHtcbiAgICBkYXRhLmZvckVhY2goKHJvdywgcm93SW5kZXgpID0+IHtcbiAgICAgIGRldGFpbGVkQ29sdW1ucy5mb3JFYWNoKChjb2x1bW4sIGNvbEluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGNlbGxWYWx1ZSA9IGZvcm1hdENlbGwocm93LmdldEluXG4gICAgICAgICAgPyByb3cuZ2V0SW4oY29sdW1uLnZhbHVlS2V5UGF0aClcbiAgICAgICAgICA6IHJvd1tjb2x1bW4udmFsdWVLZXlQYXRoXSwgY29sdW1uLCByb3cpO1xuICAgICAgICBjcmVhdGVDZWxsKGNlbGxWYWx1ZSwgY29sSW5kZXgsIHJvd0luZGV4KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGVuZENvbHVtbkluZGV4ID0gZGV0YWlsZWRDb2x1bW5zLmxlbmd0aCArIGNvbE9mZnNldDtcbiAgfSBlbHNlIHtcbiAgICBkYXRhLmZvckVhY2goKHJvdywgcm93SW5kZXgpID0+IHtcbiAgICAgIHJvdy5mb3JFYWNoKChjb2x1bW4sIGNvbEluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGNlbGxWYWx1ZSA9IGZvcm1hdENlbGwoY29sdW1uLnZhbHVlLCBjb2x1bW4sIHJvdyk7XG4gICAgICAgIGNyZWF0ZUNlbGwoY2VsbFZhbHVlLCBjb2xJbmRleCwgcm93SW5kZXgpO1xuICAgICAgICBjb25zdCBjdXJyZW50Q29sSW5kZXggPSBjb2xJbmRleCArIGNvbE9mZnNldDtcbiAgICAgICAgZW5kQ29sdW1uSW5kZXggPSBlbmRDb2x1bW5JbmRleCA8IGN1cnJlbnRDb2xJbmRleCA/IGN1cnJlbnRDb2xJbmRleCA6IGVuZENvbHVtbkluZGV4O1xuICAgICAgICBjb2xzLnB1c2goeyB3Y2g6IDUwIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgY29uc3QgZW5kUm93SW5kZXggPSAoZGF0YS5sZW5ndGggfHwgZGF0YS5zaXplKSArIHJvd09mZnNldDtcbiAgY29uc3QgcmFuZ2UgPSB7XG4gICAgczoge1xuICAgICAgYzogMCxcbiAgICAgIHI6IDAsXG4gICAgfSxcbiAgICBlOiB7XG4gICAgICBjOiBlbmRDb2x1bW5JbmRleCxcbiAgICAgIHI6IGVuZFJvd0luZGV4LFxuICAgIH0sXG4gIH07XG4gIGlmIChyYW5nZS5lLmMgPCBFWENFTF9NQVhfQ09MX0NPVU5UICYmIHJhbmdlLmUuciA8IEVYQ0VMX01BWF9ST1dfQ09VTlQpIHtcbiAgICB3b3Jrc2hlZXRbJyFyZWYnXSA9IFhMU1gudXRpbHMuZW5jb2RlX3JhbmdlKHJhbmdlKTtcbiAgfVxuXG4gIHJldHVybiB3b3Jrc2hlZXQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoc2hlZXRzLCBmaWxlTmFtZSkgPT4ge1xuICBjb25zdCB3b3JrYm9vayA9IHsgU2hlZXROYW1lczogW10sIFNoZWV0czoge30gfTtcblxuICBzaGVldHMuZm9yRWFjaCgoc2hlZXQsIGluZGV4KSA9PiB7XG4gICAgY29uc3Qgc2hlZXROYW1lID0gc2hlZXQubmFtZSB8fCBgU2hlZXQgJHtpbmRleCArIDF9YDtcbiAgICB3b3JrYm9vay5TaGVldE5hbWVzLnB1c2goc2hlZXROYW1lKTtcbiAgICBjb25zdCB3c1NoZWV0ID0gY3JlYXRlRGF0YVNoZWV0KHNoZWV0KTtcbiAgICB3b3JrYm9vay5TaGVldHNbc2hlZXROYW1lXSA9IHdzU2hlZXQ7XG4gIH0pO1xuXG4gIGNvbnN0IHdib3V0ID0gWExTWC53cml0ZSh3b3JrYm9vaywgd3JpdGVPcHRpb25zKTtcbiAgZnVuY3Rpb24gczJhYihzKSB7XG4gICAgY29uc3QgYnVmID0gbmV3IEFycmF5QnVmZmVyKHMubGVuZ3RoKTtcbiAgICBjb25zdCB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSAhPT0gcy5sZW5ndGg7ICsraSkge1xuICAgICAgdmlld1tpXSA9IHMuY2hhckNvZGVBdChpKSAmIDB4RkY7XG4gICAgfVxuICAgIHJldHVybiBidWY7XG4gIH1cblxuICAvKiB0aGUgc2F2ZUFzIGNhbGwgZG93bmxvYWRzIGEgZmlsZSBvbiB0aGUgbG9jYWwgbWFjaGluZSAqL1xuICBzYXZlQXMobmV3IEJsb2IoW3MyYWIod2JvdXQpXSwgeyB0eXBlOiAnJyB9KSwgYCR7ZmlsZU5hbWV9Lnhsc3hgKTtcbn07XG4iXX0=