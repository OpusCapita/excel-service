'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /* eslint-disable consistent-return */
/* eslint-disable no-plusplus */
/* eslint-disable no-bitwise */


var _xlsxStyles = require('xlsx-styles');

var _xlsxStyles2 = _interopRequireDefault(_xlsxStyles);

var _fileSaver = require('file-saver');

var _fileSaver2 = _interopRequireDefault(_fileSaver);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var writeOptions = {
  type: 'binary',
  bookSST: false,
  bookType: 'xlsx',
  showGridLines: false
};

var EXCEL_MAX_ROW_COUNT = 1048576;
var EXCEL_MAX_COL_COUNT = 16384;

// https://www.npmjs.com/package/xlsx-styles#cell-styles
var borderStyle = { style: 'thin', color: { rgb: 'CCCCCC' } };
var border = {
  border: {
    top: borderStyle,
    bottom: borderStyle,
    left: borderStyle,
    right: borderStyle
  }
};

var createColumnTitles = function createColumnTitles() {
  var columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var colOffset = arguments[1];
  var headerStyle = arguments[2];
  var noBorders = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var cells = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
  var rowIndex = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

  var row = [];
  columns.forEach(function (column, colIndex) {
    var cellIndex = colOffset + colIndex;
    if (Array.isArray(column)) {
      return createColumnTitles(column, colOffset, headerStyle, noBorders, cells, colIndex);
    }
    var cellValue = (column || {}).header || '';
    var cell = { v: cellValue, t: 's', s: headerStyle };
    if (!noBorders) {
      cell.s = _extends({}, cell.s, border);
    }
    var cellRef = _xlsxStyles2.default.utils.encode_cell({ c: cellIndex, r: rowIndex });
    var cellData = { cell: cell, cellRef: cellRef };
    if (column && column.merge > 1) {
      cellData.merge = {
        s: {
          c: cellIndex,
          r: rowIndex
        },
        e: {
          c: cellIndex + (column.merge - 1),
          r: rowIndex
        }
      };
    }
    var upperCell = rowIndex > 0 ? cells[rowIndex - 1][colIndex] : undefined;
    if (column && column.valueKeyPath) {
      cellData.valueKeyPath = column.valueKeyPath;
    } else if (rowIndex > 0) {
      cellData.valueKeyPath = upperCell.valueKeyPath;
    }
    var wch = upperCell && !upperCell.merge && upperCell.wch > cellValue.length ? upperCell.wch : cellValue.length;
    cellData.wch = wch;
    row.push(cellData);
  });
  if (row.length > 0) {
    cells.push(row);
  }
  return cells;
};

var createDataSheet = function createDataSheet(exportData) {
  var columns = exportData.columns,
      data = exportData.data,
      dataStyle = exportData.dataStyle,
      formatter = exportData.formatter,
      headerStyle = exportData.headerStyle,
      noBorders = exportData.noBorders,
      rows = exportData.rows;

  var worksheet = {};
  var colOffset = rows && rows.length > 0 ? 1 : 0;
  var columnTitles = createColumnTitles(columns, colOffset, headerStyle, noBorders);
  var rowOffset = columnTitles.length;

  var merges = [];
  if (rows && rows.length > 0 && rowOffset > 1) {
    merges.push({ s: { c: 0, r: 0 }, e: { c: 0, r: rowOffset - 1 } });
  }

  var cols = [];

  columnTitles.forEach(function (columnRow) {
    return columnRow.forEach(function (columnTitle, colIndex) {
      worksheet[columnTitle.cellRef] = columnTitle.cell;
      if (columnTitle.merge) {
        merges.push(columnTitle.merge);
      }
      cols[colIndex] = { wch: columnTitle.wch };
    });
  });

  if (rows) {
    var wch = 0;
    rows.forEach(function (row, rowIndex) {
      var cellRowIndex = rowIndex + rowOffset;
      var cellRef = _xlsxStyles2.default.utils.encode_cell({ c: 0, r: cellRowIndex });
      var title = row.header;
      var width = title ? title.length : 0;
      wch = wch < width ? width : wch;
      var cell = { v: title, t: 's', s: headerStyle };
      if (!noBorders) {
        cell.s = _extends({}, cell.s, border);
      }
      worksheet[cellRef] = cell;
    });
    cols.unshift({ wch: wch });
  }
  worksheet['!cols'] = cols;
  worksheet['!merges'] = merges;

  var createCell = function createCell(value, colIndex, rowIndex) {
    var cellRowIndex = rowIndex + rowOffset;
    var cellColIndex = colIndex + colOffset;
    var cellValue = value;
    if (formatter) {
      cellValue = formatter(value);
    }
    var cell = { v: cellValue, s: dataStyle };
    if (!noBorders) {
      cell.s = _extends({}, cell.s, border);
    }
    var cellRef = _xlsxStyles2.default.utils.encode_cell({ c: cellColIndex, r: cellRowIndex });
    switch (typeof cellValue === 'undefined' ? 'undefined' : _typeof(cellValue)) {
      case 'number':
        {
          cell.t = 'n';
          break;
        }
      case 'boolean':
        {
          cell.t = 'b';
          break;
        }
      default:
        {
          cell.t = 's';
          break;
        }
    }
    worksheet[cellRef] = cell;
  };

  var detailedColumns = columnTitles.length > 0 ? columnTitles[rowOffset - 1] : [];
  var endColumnIndex = 0;
  if (detailedColumns.length > 0) {
    data.forEach(function (row, rowIndex) {
      detailedColumns.forEach(function (column, colIndex) {
        createCell(row[column.valueKeyPath], colIndex, rowIndex);
      });
    });
    endColumnIndex = detailedColumns.length + colOffset;
  } else {
    data.forEach(function (row, rowIndex) {
      row.forEach(function (column, colIndex) {
        createCell(column.value, colIndex, rowIndex);
        endColumnIndex = endColumnIndex < colIndex ? colIndex : endColumnIndex;
      });
    });
  }
  var endRowIndex = data.length + rowOffset;
  var range = {
    s: {
      c: 0,
      r: 0
    },
    e: {
      c: endColumnIndex,
      r: endRowIndex
    }
  };
  if (range.e.c < EXCEL_MAX_COL_COUNT && range.e.r < EXCEL_MAX_ROW_COUNT) {
    worksheet['!ref'] = _xlsxStyles2.default.utils.encode_range(range);
  }

  return worksheet;
};

exports.default = function (sheets, fileName) {
  var workbook = { SheetNames: [], Sheets: {} };

  sheets.forEach(function (sheet, index) {
    var sheetName = sheet.name || 'Sheet ' + (index + 1);
    workbook.SheetNames.push(sheetName);
    var wsSheet = createDataSheet(sheet);
    workbook.Sheets[sheetName] = wsSheet;
  });

  var wbout = _xlsxStyles2.default.write(workbook, writeOptions);
  function s2ab(s) {
    var buf = new ArrayBuffer(s.length);
    var view = new Uint8Array(buf);
    for (var i = 0; i !== s.length; ++i) {
      view[i] = s.charCodeAt(i) & 0xFF;
    }
    return buf;
  }

  /* the saveAs call downloads a file on the local machine */
  (0, _fileSaver2.default)(new Blob([s2ab(wbout)], { type: '' }), fileName + '.xlsx');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHlsZWQtZXhjZWwtZXhwb3J0LmpzIl0sIm5hbWVzIjpbIndyaXRlT3B0aW9ucyIsInR5cGUiLCJib29rU1NUIiwiYm9va1R5cGUiLCJzaG93R3JpZExpbmVzIiwiRVhDRUxfTUFYX1JPV19DT1VOVCIsIkVYQ0VMX01BWF9DT0xfQ09VTlQiLCJib3JkZXJTdHlsZSIsInN0eWxlIiwiY29sb3IiLCJyZ2IiLCJib3JkZXIiLCJ0b3AiLCJib3R0b20iLCJsZWZ0IiwicmlnaHQiLCJjcmVhdGVDb2x1bW5UaXRsZXMiLCJjb2x1bW5zIiwiY29sT2Zmc2V0IiwiaGVhZGVyU3R5bGUiLCJub0JvcmRlcnMiLCJjZWxscyIsInJvd0luZGV4Iiwicm93IiwiZm9yRWFjaCIsImNvbHVtbiIsImNvbEluZGV4IiwiY2VsbEluZGV4IiwiQXJyYXkiLCJpc0FycmF5IiwiY2VsbFZhbHVlIiwiaGVhZGVyIiwiY2VsbCIsInYiLCJ0IiwicyIsImNlbGxSZWYiLCJYTFNYIiwidXRpbHMiLCJlbmNvZGVfY2VsbCIsImMiLCJyIiwiY2VsbERhdGEiLCJtZXJnZSIsImUiLCJ1cHBlckNlbGwiLCJ1bmRlZmluZWQiLCJ2YWx1ZUtleVBhdGgiLCJ3Y2giLCJsZW5ndGgiLCJwdXNoIiwiY3JlYXRlRGF0YVNoZWV0IiwiZXhwb3J0RGF0YSIsImRhdGEiLCJkYXRhU3R5bGUiLCJmb3JtYXR0ZXIiLCJyb3dzIiwid29ya3NoZWV0IiwiY29sdW1uVGl0bGVzIiwicm93T2Zmc2V0IiwibWVyZ2VzIiwiY29scyIsImNvbHVtblJvdyIsImNvbHVtblRpdGxlIiwiY2VsbFJvd0luZGV4IiwidGl0bGUiLCJ3aWR0aCIsInVuc2hpZnQiLCJjcmVhdGVDZWxsIiwidmFsdWUiLCJjZWxsQ29sSW5kZXgiLCJkZXRhaWxlZENvbHVtbnMiLCJlbmRDb2x1bW5JbmRleCIsImVuZFJvd0luZGV4IiwicmFuZ2UiLCJlbmNvZGVfcmFuZ2UiLCJzaGVldHMiLCJmaWxlTmFtZSIsIndvcmtib29rIiwiU2hlZXROYW1lcyIsIlNoZWV0cyIsInNoZWV0IiwiaW5kZXgiLCJzaGVldE5hbWUiLCJuYW1lIiwid3NTaGVldCIsIndib3V0Iiwid3JpdGUiLCJzMmFiIiwiYnVmIiwiQXJyYXlCdWZmZXIiLCJ2aWV3IiwiVWludDhBcnJheSIsImkiLCJjaGFyQ29kZUF0IiwiQmxvYiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O2tRQUFBO0FBQ0E7QUFDQTs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUEsSUFBTUEsZUFBZTtBQUNuQkMsUUFBTSxRQURhO0FBRW5CQyxXQUFTLEtBRlU7QUFHbkJDLFlBQVUsTUFIUztBQUluQkMsaUJBQWU7QUFKSSxDQUFyQjs7QUFPQSxJQUFNQyxzQkFBc0IsT0FBNUI7QUFDQSxJQUFNQyxzQkFBc0IsS0FBNUI7O0FBRUE7QUFDQSxJQUFNQyxjQUFjLEVBQUVDLE9BQU8sTUFBVCxFQUFpQkMsT0FBTyxFQUFFQyxLQUFLLFFBQVAsRUFBeEIsRUFBcEI7QUFDQSxJQUFNQyxTQUFTO0FBQ2JBLFVBQVE7QUFDTkMsU0FBS0wsV0FEQztBQUVOTSxZQUFRTixXQUZGO0FBR05PLFVBQU1QLFdBSEE7QUFJTlEsV0FBT1I7QUFKRDtBQURLLENBQWY7O0FBU0EsSUFBTVMscUJBQXFCLFNBQXJCQSxrQkFBcUIsR0FPdEI7QUFBQSxNQU5IQyxPQU1HLHVFQU5PLEVBTVA7QUFBQSxNQUxIQyxTQUtHO0FBQUEsTUFKSEMsV0FJRztBQUFBLE1BSEhDLFNBR0csdUVBSFMsS0FHVDtBQUFBLE1BRkhDLEtBRUcsdUVBRkssRUFFTDtBQUFBLE1BREhDLFFBQ0csdUVBRFEsQ0FDUjs7QUFDSCxNQUFNQyxNQUFNLEVBQVo7QUFDQU4sVUFBUU8sT0FBUixDQUFnQixVQUFDQyxNQUFELEVBQVNDLFFBQVQsRUFBc0I7QUFDcEMsUUFBTUMsWUFBWVQsWUFBWVEsUUFBOUI7QUFDQSxRQUFJRSxNQUFNQyxPQUFOLENBQWNKLE1BQWQsQ0FBSixFQUEyQjtBQUN6QixhQUFPVCxtQkFBbUJTLE1BQW5CLEVBQTJCUCxTQUEzQixFQUFzQ0MsV0FBdEMsRUFBbURDLFNBQW5ELEVBQThEQyxLQUE5RCxFQUFxRUssUUFBckUsQ0FBUDtBQUNEO0FBQ0QsUUFBTUksWUFBWSxDQUFDTCxVQUFVLEVBQVgsRUFBZU0sTUFBZixJQUF5QixFQUEzQztBQUNBLFFBQU1DLE9BQU8sRUFBRUMsR0FBR0gsU0FBTCxFQUFnQkksR0FBRyxHQUFuQixFQUF3QkMsR0FBR2hCLFdBQTNCLEVBQWI7QUFDQSxRQUFJLENBQUNDLFNBQUwsRUFBZ0I7QUFDZFksV0FBS0csQ0FBTCxnQkFBY0gsS0FBS0csQ0FBbkIsRUFBeUJ4QixNQUF6QjtBQUNEO0FBQ0QsUUFBTXlCLFVBQVVDLHFCQUFLQyxLQUFMLENBQVdDLFdBQVgsQ0FBdUIsRUFBRUMsR0FBR2IsU0FBTCxFQUFnQmMsR0FBR25CLFFBQW5CLEVBQXZCLENBQWhCO0FBQ0EsUUFBTW9CLFdBQVcsRUFBRVYsVUFBRixFQUFRSSxnQkFBUixFQUFqQjtBQUNBLFFBQUlYLFVBQVVBLE9BQU9rQixLQUFQLEdBQWUsQ0FBN0IsRUFBZ0M7QUFDOUJELGVBQVNDLEtBQVQsR0FBaUI7QUFDZlIsV0FBRztBQUNESyxhQUFHYixTQURGO0FBRURjLGFBQUduQjtBQUZGLFNBRFk7QUFLZnNCLFdBQUc7QUFDREosYUFBR2IsYUFBYUYsT0FBT2tCLEtBQVAsR0FBZSxDQUE1QixDQURGO0FBRURGLGFBQUduQjtBQUZGO0FBTFksT0FBakI7QUFVRDtBQUNELFFBQU11QixZQUFZdkIsV0FBVyxDQUFYLEdBQWVELE1BQU1DLFdBQVcsQ0FBakIsRUFBb0JJLFFBQXBCLENBQWYsR0FBK0NvQixTQUFqRTtBQUNBLFFBQUlyQixVQUFVQSxPQUFPc0IsWUFBckIsRUFBbUM7QUFDakNMLGVBQVNLLFlBQVQsR0FBd0J0QixPQUFPc0IsWUFBL0I7QUFDRCxLQUZELE1BRU8sSUFBSXpCLFdBQVcsQ0FBZixFQUFrQjtBQUN2Qm9CLGVBQVNLLFlBQVQsR0FBd0JGLFVBQVVFLFlBQWxDO0FBQ0Q7QUFDRCxRQUFNQyxNQUFNSCxhQUFhLENBQUNBLFVBQVVGLEtBQXhCLElBQWlDRSxVQUFVRyxHQUFWLEdBQWdCbEIsVUFBVW1CLE1BQTNELEdBQ1JKLFVBQVVHLEdBREYsR0FFUmxCLFVBQVVtQixNQUZkO0FBR0FQLGFBQVNNLEdBQVQsR0FBZUEsR0FBZjtBQUNBekIsUUFBSTJCLElBQUosQ0FBU1IsUUFBVDtBQUNELEdBbkNEO0FBb0NBLE1BQUluQixJQUFJMEIsTUFBSixHQUFhLENBQWpCLEVBQW9CO0FBQ2xCNUIsVUFBTTZCLElBQU4sQ0FBVzNCLEdBQVg7QUFDRDtBQUNELFNBQU9GLEtBQVA7QUFDRCxDQWpERDs7QUFtREEsSUFBTThCLGtCQUFrQixTQUFsQkEsZUFBa0IsQ0FBQ0MsVUFBRCxFQUFnQjtBQUFBLE1BRXBDbkMsT0FGb0MsR0FTbENtQyxVQVRrQyxDQUVwQ25DLE9BRm9DO0FBQUEsTUFHcENvQyxJQUhvQyxHQVNsQ0QsVUFUa0MsQ0FHcENDLElBSG9DO0FBQUEsTUFJcENDLFNBSm9DLEdBU2xDRixVQVRrQyxDQUlwQ0UsU0FKb0M7QUFBQSxNQUtwQ0MsU0FMb0MsR0FTbENILFVBVGtDLENBS3BDRyxTQUxvQztBQUFBLE1BTXBDcEMsV0FOb0MsR0FTbENpQyxVQVRrQyxDQU1wQ2pDLFdBTm9DO0FBQUEsTUFPcENDLFNBUG9DLEdBU2xDZ0MsVUFUa0MsQ0FPcENoQyxTQVBvQztBQUFBLE1BUXBDb0MsSUFSb0MsR0FTbENKLFVBVGtDLENBUXBDSSxJQVJvQzs7QUFVdEMsTUFBTUMsWUFBWSxFQUFsQjtBQUNBLE1BQU12QyxZQUFZc0MsUUFBUUEsS0FBS1AsTUFBTCxHQUFjLENBQXRCLEdBQTBCLENBQTFCLEdBQThCLENBQWhEO0FBQ0EsTUFBTVMsZUFBZTFDLG1CQUFtQkMsT0FBbkIsRUFBNEJDLFNBQTVCLEVBQXVDQyxXQUF2QyxFQUFvREMsU0FBcEQsQ0FBckI7QUFDQSxNQUFNdUMsWUFBWUQsYUFBYVQsTUFBL0I7O0FBRUEsTUFBTVcsU0FBUyxFQUFmO0FBQ0EsTUFBSUosUUFBUUEsS0FBS1AsTUFBTCxHQUFjLENBQXRCLElBQTJCVSxZQUFZLENBQTNDLEVBQThDO0FBQzVDQyxXQUFPVixJQUFQLENBQVksRUFBRWYsR0FBRyxFQUFFSyxHQUFHLENBQUwsRUFBUUMsR0FBRyxDQUFYLEVBQUwsRUFBcUJHLEdBQUcsRUFBRUosR0FBRyxDQUFMLEVBQVFDLEdBQUdrQixZQUFZLENBQXZCLEVBQXhCLEVBQVo7QUFDRDs7QUFFRCxNQUFNRSxPQUFPLEVBQWI7O0FBRUFILGVBQWFsQyxPQUFiLENBQXFCO0FBQUEsV0FDbkJzQyxVQUFVdEMsT0FBVixDQUFrQixVQUFDdUMsV0FBRCxFQUFjckMsUUFBZCxFQUEyQjtBQUMzQytCLGdCQUFVTSxZQUFZM0IsT0FBdEIsSUFBaUMyQixZQUFZL0IsSUFBN0M7QUFDQSxVQUFJK0IsWUFBWXBCLEtBQWhCLEVBQXVCO0FBQ3JCaUIsZUFBT1YsSUFBUCxDQUFZYSxZQUFZcEIsS0FBeEI7QUFDRDtBQUNEa0IsV0FBS25DLFFBQUwsSUFBaUIsRUFBRXNCLEtBQUtlLFlBQVlmLEdBQW5CLEVBQWpCO0FBQ0QsS0FORCxDQURtQjtBQUFBLEdBQXJCOztBQVVBLE1BQUlRLElBQUosRUFBVTtBQUNSLFFBQUlSLE1BQU0sQ0FBVjtBQUNBUSxTQUFLaEMsT0FBTCxDQUFhLFVBQUNELEdBQUQsRUFBTUQsUUFBTixFQUFtQjtBQUM5QixVQUFNMEMsZUFBZTFDLFdBQVdxQyxTQUFoQztBQUNBLFVBQU12QixVQUFVQyxxQkFBS0MsS0FBTCxDQUFXQyxXQUFYLENBQXVCLEVBQUVDLEdBQUcsQ0FBTCxFQUFRQyxHQUFHdUIsWUFBWCxFQUF2QixDQUFoQjtBQUNBLFVBQU1DLFFBQVExQyxJQUFJUSxNQUFsQjtBQUNBLFVBQU1tQyxRQUFRRCxRQUFRQSxNQUFNaEIsTUFBZCxHQUF1QixDQUFyQztBQUNBRCxZQUFNQSxNQUFNa0IsS0FBTixHQUFjQSxLQUFkLEdBQXNCbEIsR0FBNUI7QUFDQSxVQUFNaEIsT0FBTyxFQUFFQyxHQUFHZ0MsS0FBTCxFQUFZL0IsR0FBRyxHQUFmLEVBQW9CQyxHQUFHaEIsV0FBdkIsRUFBYjtBQUNBLFVBQUksQ0FBQ0MsU0FBTCxFQUFnQjtBQUNkWSxhQUFLRyxDQUFMLGdCQUFjSCxLQUFLRyxDQUFuQixFQUF5QnhCLE1BQXpCO0FBQ0Q7QUFDRDhDLGdCQUFVckIsT0FBVixJQUFxQkosSUFBckI7QUFDRCxLQVhEO0FBWUE2QixTQUFLTSxPQUFMLENBQWEsRUFBRW5CLFFBQUYsRUFBYjtBQUNEO0FBQ0RTLFlBQVUsT0FBVixJQUFxQkksSUFBckI7QUFDQUosWUFBVSxTQUFWLElBQXVCRyxNQUF2Qjs7QUFFQSxNQUFNUSxhQUFhLFNBQWJBLFVBQWEsQ0FBQ0MsS0FBRCxFQUFRM0MsUUFBUixFQUFrQkosUUFBbEIsRUFBK0I7QUFDaEQsUUFBTTBDLGVBQWUxQyxXQUFXcUMsU0FBaEM7QUFDQSxRQUFNVyxlQUFlNUMsV0FBV1IsU0FBaEM7QUFDQSxRQUFJWSxZQUFZdUMsS0FBaEI7QUFDQSxRQUFJZCxTQUFKLEVBQWU7QUFDYnpCLGtCQUFZeUIsVUFBVWMsS0FBVixDQUFaO0FBQ0Q7QUFDRCxRQUFNckMsT0FBTyxFQUFFQyxHQUFHSCxTQUFMLEVBQWdCSyxHQUFHbUIsU0FBbkIsRUFBYjtBQUNBLFFBQUksQ0FBQ2xDLFNBQUwsRUFBZ0I7QUFDZFksV0FBS0csQ0FBTCxnQkFBY0gsS0FBS0csQ0FBbkIsRUFBeUJ4QixNQUF6QjtBQUNEO0FBQ0QsUUFBTXlCLFVBQVVDLHFCQUFLQyxLQUFMLENBQVdDLFdBQVgsQ0FBdUIsRUFBRUMsR0FBRzhCLFlBQUwsRUFBbUI3QixHQUFHdUIsWUFBdEIsRUFBdkIsQ0FBaEI7QUFDQSxtQkFBZWxDLFNBQWYseUNBQWVBLFNBQWY7QUFDRSxXQUFNLFFBQU47QUFBaUI7QUFDZkUsZUFBS0UsQ0FBTCxHQUFTLEdBQVQ7QUFDQTtBQUNEO0FBQ0QsV0FBTSxTQUFOO0FBQWtCO0FBQ2hCRixlQUFLRSxDQUFMLEdBQVMsR0FBVDtBQUNBO0FBQ0Q7QUFDRDtBQUFTO0FBQ1BGLGVBQUtFLENBQUwsR0FBUyxHQUFUO0FBQ0E7QUFDRDtBQVpIO0FBY0F1QixjQUFVckIsT0FBVixJQUFxQkosSUFBckI7QUFDRCxHQTNCRDs7QUE2QkEsTUFBTXVDLGtCQUFrQmIsYUFBYVQsTUFBYixHQUFzQixDQUF0QixHQUEwQlMsYUFBYUMsWUFBWSxDQUF6QixDQUExQixHQUF3RCxFQUFoRjtBQUNBLE1BQUlhLGlCQUFpQixDQUFyQjtBQUNBLE1BQUlELGdCQUFnQnRCLE1BQWhCLEdBQXlCLENBQTdCLEVBQWdDO0FBQzlCSSxTQUFLN0IsT0FBTCxDQUFhLFVBQUNELEdBQUQsRUFBTUQsUUFBTixFQUFtQjtBQUM5QmlELHNCQUFnQi9DLE9BQWhCLENBQXdCLFVBQUNDLE1BQUQsRUFBU0MsUUFBVCxFQUFzQjtBQUM1QzBDLG1CQUFXN0MsSUFBSUUsT0FBT3NCLFlBQVgsQ0FBWCxFQUFxQ3JCLFFBQXJDLEVBQStDSixRQUEvQztBQUNELE9BRkQ7QUFHRCxLQUpEO0FBS0FrRCxxQkFBaUJELGdCQUFnQnRCLE1BQWhCLEdBQXlCL0IsU0FBMUM7QUFDRCxHQVBELE1BT087QUFDTG1DLFNBQUs3QixPQUFMLENBQWEsVUFBQ0QsR0FBRCxFQUFNRCxRQUFOLEVBQW1CO0FBQzlCQyxVQUFJQyxPQUFKLENBQVksVUFBQ0MsTUFBRCxFQUFTQyxRQUFULEVBQXNCO0FBQ2hDMEMsbUJBQVczQyxPQUFPNEMsS0FBbEIsRUFBeUIzQyxRQUF6QixFQUFtQ0osUUFBbkM7QUFDQWtELHlCQUFpQkEsaUJBQWlCOUMsUUFBakIsR0FBNEJBLFFBQTVCLEdBQXVDOEMsY0FBeEQ7QUFDRCxPQUhEO0FBSUQsS0FMRDtBQU1EO0FBQ0QsTUFBTUMsY0FBY3BCLEtBQUtKLE1BQUwsR0FBY1UsU0FBbEM7QUFDQSxNQUFNZSxRQUFRO0FBQ1p2QyxPQUFHO0FBQ0RLLFNBQUcsQ0FERjtBQUVEQyxTQUFHO0FBRkYsS0FEUztBQUtaRyxPQUFHO0FBQ0RKLFNBQUdnQyxjQURGO0FBRUQvQixTQUFHZ0M7QUFGRjtBQUxTLEdBQWQ7QUFVQSxNQUFJQyxNQUFNOUIsQ0FBTixDQUFRSixDQUFSLEdBQVlsQyxtQkFBWixJQUFtQ29FLE1BQU05QixDQUFOLENBQVFILENBQVIsR0FBWXBDLG1CQUFuRCxFQUF3RTtBQUN0RW9ELGNBQVUsTUFBVixJQUFvQnBCLHFCQUFLQyxLQUFMLENBQVdxQyxZQUFYLENBQXdCRCxLQUF4QixDQUFwQjtBQUNEOztBQUVELFNBQU9qQixTQUFQO0FBQ0QsQ0FqSEQ7O2tCQW1IZSxVQUFDbUIsTUFBRCxFQUFTQyxRQUFULEVBQXNCO0FBQ25DLE1BQU1DLFdBQVcsRUFBRUMsWUFBWSxFQUFkLEVBQWtCQyxRQUFRLEVBQTFCLEVBQWpCOztBQUVBSixTQUFPcEQsT0FBUCxDQUFlLFVBQUN5RCxLQUFELEVBQVFDLEtBQVIsRUFBa0I7QUFDL0IsUUFBTUMsWUFBWUYsTUFBTUcsSUFBTixnQkFBdUJGLFFBQVEsQ0FBL0IsQ0FBbEI7QUFDQUosYUFBU0MsVUFBVCxDQUFvQjdCLElBQXBCLENBQXlCaUMsU0FBekI7QUFDQSxRQUFNRSxVQUFVbEMsZ0JBQWdCOEIsS0FBaEIsQ0FBaEI7QUFDQUgsYUFBU0UsTUFBVCxDQUFnQkcsU0FBaEIsSUFBNkJFLE9BQTdCO0FBQ0QsR0FMRDs7QUFPQSxNQUFNQyxRQUFRakQscUJBQUtrRCxLQUFMLENBQVdULFFBQVgsRUFBcUI5RSxZQUFyQixDQUFkO0FBQ0EsV0FBU3dGLElBQVQsQ0FBY3JELENBQWQsRUFBaUI7QUFDZixRQUFNc0QsTUFBTSxJQUFJQyxXQUFKLENBQWdCdkQsRUFBRWMsTUFBbEIsQ0FBWjtBQUNBLFFBQU0wQyxPQUFPLElBQUlDLFVBQUosQ0FBZUgsR0FBZixDQUFiO0FBQ0EsU0FBSyxJQUFJSSxJQUFJLENBQWIsRUFBZ0JBLE1BQU0xRCxFQUFFYyxNQUF4QixFQUFnQyxFQUFFNEMsQ0FBbEMsRUFBcUM7QUFDbkNGLFdBQUtFLENBQUwsSUFBVTFELEVBQUUyRCxVQUFGLENBQWFELENBQWIsSUFBa0IsSUFBNUI7QUFDRDtBQUNELFdBQU9KLEdBQVA7QUFDRDs7QUFFRDtBQUNBLDJCQUFPLElBQUlNLElBQUosQ0FBUyxDQUFDUCxLQUFLRixLQUFMLENBQUQsQ0FBVCxFQUF3QixFQUFFckYsTUFBTSxFQUFSLEVBQXhCLENBQVAsRUFBaUQ0RSxRQUFqRDtBQUNELEMiLCJmaWxlIjoic3R5bGVkLWV4Y2VsLWV4cG9ydC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIGNvbnNpc3RlbnQtcmV0dXJuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wbHVzcGx1cyAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuaW1wb3J0IFhMU1ggZnJvbSAneGxzeC1zdHlsZXMnO1xuaW1wb3J0IHNhdmVBcyBmcm9tICdmaWxlLXNhdmVyJztcblxuY29uc3Qgd3JpdGVPcHRpb25zID0ge1xuICB0eXBlOiAnYmluYXJ5JyxcbiAgYm9va1NTVDogZmFsc2UsXG4gIGJvb2tUeXBlOiAneGxzeCcsXG4gIHNob3dHcmlkTGluZXM6IGZhbHNlLFxufTtcblxuY29uc3QgRVhDRUxfTUFYX1JPV19DT1VOVCA9IDEwNDg1NzY7XG5jb25zdCBFWENFTF9NQVhfQ09MX0NPVU5UID0gMTYzODQ7XG5cbi8vIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3hsc3gtc3R5bGVzI2NlbGwtc3R5bGVzXG5jb25zdCBib3JkZXJTdHlsZSA9IHsgc3R5bGU6ICd0aGluJywgY29sb3I6IHsgcmdiOiAnQ0NDQ0NDJyB9IH07XG5jb25zdCBib3JkZXIgPSB7XG4gIGJvcmRlcjoge1xuICAgIHRvcDogYm9yZGVyU3R5bGUsXG4gICAgYm90dG9tOiBib3JkZXJTdHlsZSxcbiAgICBsZWZ0OiBib3JkZXJTdHlsZSxcbiAgICByaWdodDogYm9yZGVyU3R5bGUsXG4gIH0sXG59O1xuXG5jb25zdCBjcmVhdGVDb2x1bW5UaXRsZXMgPSAoXG4gIGNvbHVtbnMgPSBbXSxcbiAgY29sT2Zmc2V0LFxuICBoZWFkZXJTdHlsZSxcbiAgbm9Cb3JkZXJzID0gZmFsc2UsXG4gIGNlbGxzID0gW10sXG4gIHJvd0luZGV4ID0gMCxcbikgPT4ge1xuICBjb25zdCByb3cgPSBbXTtcbiAgY29sdW1ucy5mb3JFYWNoKChjb2x1bW4sIGNvbEluZGV4KSA9PiB7XG4gICAgY29uc3QgY2VsbEluZGV4ID0gY29sT2Zmc2V0ICsgY29sSW5kZXg7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29sdW1uKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUNvbHVtblRpdGxlcyhjb2x1bW4sIGNvbE9mZnNldCwgaGVhZGVyU3R5bGUsIG5vQm9yZGVycywgY2VsbHMsIGNvbEluZGV4KTtcbiAgICB9XG4gICAgY29uc3QgY2VsbFZhbHVlID0gKGNvbHVtbiB8fCB7fSkuaGVhZGVyIHx8ICcnO1xuICAgIGNvbnN0IGNlbGwgPSB7IHY6IGNlbGxWYWx1ZSwgdDogJ3MnLCBzOiBoZWFkZXJTdHlsZSB9O1xuICAgIGlmICghbm9Cb3JkZXJzKSB7XG4gICAgICBjZWxsLnMgPSB7IC4uLmNlbGwucywgLi4uYm9yZGVyIH07XG4gICAgfVxuICAgIGNvbnN0IGNlbGxSZWYgPSBYTFNYLnV0aWxzLmVuY29kZV9jZWxsKHsgYzogY2VsbEluZGV4LCByOiByb3dJbmRleCB9KTtcbiAgICBjb25zdCBjZWxsRGF0YSA9IHsgY2VsbCwgY2VsbFJlZiB9O1xuICAgIGlmIChjb2x1bW4gJiYgY29sdW1uLm1lcmdlID4gMSkge1xuICAgICAgY2VsbERhdGEubWVyZ2UgPSB7XG4gICAgICAgIHM6IHtcbiAgICAgICAgICBjOiBjZWxsSW5kZXgsXG4gICAgICAgICAgcjogcm93SW5kZXgsXG4gICAgICAgIH0sXG4gICAgICAgIGU6IHtcbiAgICAgICAgICBjOiBjZWxsSW5kZXggKyAoY29sdW1uLm1lcmdlIC0gMSksXG4gICAgICAgICAgcjogcm93SW5kZXgsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCB1cHBlckNlbGwgPSByb3dJbmRleCA+IDAgPyBjZWxsc1tyb3dJbmRleCAtIDFdW2NvbEluZGV4XSA6IHVuZGVmaW5lZDtcbiAgICBpZiAoY29sdW1uICYmIGNvbHVtbi52YWx1ZUtleVBhdGgpIHtcbiAgICAgIGNlbGxEYXRhLnZhbHVlS2V5UGF0aCA9IGNvbHVtbi52YWx1ZUtleVBhdGg7XG4gICAgfSBlbHNlIGlmIChyb3dJbmRleCA+IDApIHtcbiAgICAgIGNlbGxEYXRhLnZhbHVlS2V5UGF0aCA9IHVwcGVyQ2VsbC52YWx1ZUtleVBhdGg7XG4gICAgfVxuICAgIGNvbnN0IHdjaCA9IHVwcGVyQ2VsbCAmJiAhdXBwZXJDZWxsLm1lcmdlICYmIHVwcGVyQ2VsbC53Y2ggPiBjZWxsVmFsdWUubGVuZ3RoXG4gICAgICA/IHVwcGVyQ2VsbC53Y2hcbiAgICAgIDogY2VsbFZhbHVlLmxlbmd0aDtcbiAgICBjZWxsRGF0YS53Y2ggPSB3Y2g7XG4gICAgcm93LnB1c2goY2VsbERhdGEpO1xuICB9KTtcbiAgaWYgKHJvdy5sZW5ndGggPiAwKSB7XG4gICAgY2VsbHMucHVzaChyb3cpO1xuICB9XG4gIHJldHVybiBjZWxscztcbn07XG5cbmNvbnN0IGNyZWF0ZURhdGFTaGVldCA9IChleHBvcnREYXRhKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjb2x1bW5zLFxuICAgIGRhdGEsXG4gICAgZGF0YVN0eWxlLFxuICAgIGZvcm1hdHRlcixcbiAgICBoZWFkZXJTdHlsZSxcbiAgICBub0JvcmRlcnMsXG4gICAgcm93cyxcbiAgfSA9IGV4cG9ydERhdGE7XG4gIGNvbnN0IHdvcmtzaGVldCA9IHt9O1xuICBjb25zdCBjb2xPZmZzZXQgPSByb3dzICYmIHJvd3MubGVuZ3RoID4gMCA/IDEgOiAwO1xuICBjb25zdCBjb2x1bW5UaXRsZXMgPSBjcmVhdGVDb2x1bW5UaXRsZXMoY29sdW1ucywgY29sT2Zmc2V0LCBoZWFkZXJTdHlsZSwgbm9Cb3JkZXJzKTtcbiAgY29uc3Qgcm93T2Zmc2V0ID0gY29sdW1uVGl0bGVzLmxlbmd0aDtcblxuICBjb25zdCBtZXJnZXMgPSBbXTtcbiAgaWYgKHJvd3MgJiYgcm93cy5sZW5ndGggPiAwICYmIHJvd09mZnNldCA+IDEpIHtcbiAgICBtZXJnZXMucHVzaCh7IHM6IHsgYzogMCwgcjogMCB9LCBlOiB7IGM6IDAsIHI6IHJvd09mZnNldCAtIDEgfSB9KTtcbiAgfVxuXG4gIGNvbnN0IGNvbHMgPSBbXTtcblxuICBjb2x1bW5UaXRsZXMuZm9yRWFjaChjb2x1bW5Sb3cgPT4gKFxuICAgIGNvbHVtblJvdy5mb3JFYWNoKChjb2x1bW5UaXRsZSwgY29sSW5kZXgpID0+IHtcbiAgICAgIHdvcmtzaGVldFtjb2x1bW5UaXRsZS5jZWxsUmVmXSA9IGNvbHVtblRpdGxlLmNlbGw7XG4gICAgICBpZiAoY29sdW1uVGl0bGUubWVyZ2UpIHtcbiAgICAgICAgbWVyZ2VzLnB1c2goY29sdW1uVGl0bGUubWVyZ2UpO1xuICAgICAgfVxuICAgICAgY29sc1tjb2xJbmRleF0gPSB7IHdjaDogY29sdW1uVGl0bGUud2NoIH07XG4gICAgfSlcbiAgKSk7XG5cbiAgaWYgKHJvd3MpIHtcbiAgICBsZXQgd2NoID0gMDtcbiAgICByb3dzLmZvckVhY2goKHJvdywgcm93SW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IGNlbGxSb3dJbmRleCA9IHJvd0luZGV4ICsgcm93T2Zmc2V0O1xuICAgICAgY29uc3QgY2VsbFJlZiA9IFhMU1gudXRpbHMuZW5jb2RlX2NlbGwoeyBjOiAwLCByOiBjZWxsUm93SW5kZXggfSk7XG4gICAgICBjb25zdCB0aXRsZSA9IHJvdy5oZWFkZXI7XG4gICAgICBjb25zdCB3aWR0aCA9IHRpdGxlID8gdGl0bGUubGVuZ3RoIDogMDtcbiAgICAgIHdjaCA9IHdjaCA8IHdpZHRoID8gd2lkdGggOiB3Y2g7XG4gICAgICBjb25zdCBjZWxsID0geyB2OiB0aXRsZSwgdDogJ3MnLCBzOiBoZWFkZXJTdHlsZSB9O1xuICAgICAgaWYgKCFub0JvcmRlcnMpIHtcbiAgICAgICAgY2VsbC5zID0geyAuLi5jZWxsLnMsIC4uLmJvcmRlciB9O1xuICAgICAgfVxuICAgICAgd29ya3NoZWV0W2NlbGxSZWZdID0gY2VsbDtcbiAgICB9KTtcbiAgICBjb2xzLnVuc2hpZnQoeyB3Y2ggfSk7XG4gIH1cbiAgd29ya3NoZWV0WychY29scyddID0gY29scztcbiAgd29ya3NoZWV0WychbWVyZ2VzJ10gPSBtZXJnZXM7XG5cbiAgY29uc3QgY3JlYXRlQ2VsbCA9ICh2YWx1ZSwgY29sSW5kZXgsIHJvd0luZGV4KSA9PiB7XG4gICAgY29uc3QgY2VsbFJvd0luZGV4ID0gcm93SW5kZXggKyByb3dPZmZzZXQ7XG4gICAgY29uc3QgY2VsbENvbEluZGV4ID0gY29sSW5kZXggKyBjb2xPZmZzZXQ7XG4gICAgbGV0IGNlbGxWYWx1ZSA9IHZhbHVlO1xuICAgIGlmIChmb3JtYXR0ZXIpIHtcbiAgICAgIGNlbGxWYWx1ZSA9IGZvcm1hdHRlcih2YWx1ZSk7XG4gICAgfVxuICAgIGNvbnN0IGNlbGwgPSB7IHY6IGNlbGxWYWx1ZSwgczogZGF0YVN0eWxlIH07XG4gICAgaWYgKCFub0JvcmRlcnMpIHtcbiAgICAgIGNlbGwucyA9IHsgLi4uY2VsbC5zLCAuLi5ib3JkZXIgfTtcbiAgICB9XG4gICAgY29uc3QgY2VsbFJlZiA9IFhMU1gudXRpbHMuZW5jb2RlX2NlbGwoeyBjOiBjZWxsQ29sSW5kZXgsIHI6IGNlbGxSb3dJbmRleCB9KTtcbiAgICBzd2l0Y2ggKHR5cGVvZiBjZWxsVmFsdWUpIHtcbiAgICAgIGNhc2UgKCdudW1iZXInKToge1xuICAgICAgICBjZWxsLnQgPSAnbic7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAoJ2Jvb2xlYW4nKToge1xuICAgICAgICBjZWxsLnQgPSAnYic7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBjZWxsLnQgPSAncyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICB3b3Jrc2hlZXRbY2VsbFJlZl0gPSBjZWxsO1xuICB9O1xuXG4gIGNvbnN0IGRldGFpbGVkQ29sdW1ucyA9IGNvbHVtblRpdGxlcy5sZW5ndGggPiAwID8gY29sdW1uVGl0bGVzW3Jvd09mZnNldCAtIDFdIDogW107XG4gIGxldCBlbmRDb2x1bW5JbmRleCA9IDA7XG4gIGlmIChkZXRhaWxlZENvbHVtbnMubGVuZ3RoID4gMCkge1xuICAgIGRhdGEuZm9yRWFjaCgocm93LCByb3dJbmRleCkgPT4ge1xuICAgICAgZGV0YWlsZWRDb2x1bW5zLmZvckVhY2goKGNvbHVtbiwgY29sSW5kZXgpID0+IHtcbiAgICAgICAgY3JlYXRlQ2VsbChyb3dbY29sdW1uLnZhbHVlS2V5UGF0aF0sIGNvbEluZGV4LCByb3dJbmRleCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBlbmRDb2x1bW5JbmRleCA9IGRldGFpbGVkQ29sdW1ucy5sZW5ndGggKyBjb2xPZmZzZXQ7XG4gIH0gZWxzZSB7XG4gICAgZGF0YS5mb3JFYWNoKChyb3csIHJvd0luZGV4KSA9PiB7XG4gICAgICByb3cuZm9yRWFjaCgoY29sdW1uLCBjb2xJbmRleCkgPT4ge1xuICAgICAgICBjcmVhdGVDZWxsKGNvbHVtbi52YWx1ZSwgY29sSW5kZXgsIHJvd0luZGV4KTtcbiAgICAgICAgZW5kQ29sdW1uSW5kZXggPSBlbmRDb2x1bW5JbmRleCA8IGNvbEluZGV4ID8gY29sSW5kZXggOiBlbmRDb2x1bW5JbmRleDtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGNvbnN0IGVuZFJvd0luZGV4ID0gZGF0YS5sZW5ndGggKyByb3dPZmZzZXQ7XG4gIGNvbnN0IHJhbmdlID0ge1xuICAgIHM6IHtcbiAgICAgIGM6IDAsXG4gICAgICByOiAwLFxuICAgIH0sXG4gICAgZToge1xuICAgICAgYzogZW5kQ29sdW1uSW5kZXgsXG4gICAgICByOiBlbmRSb3dJbmRleCxcbiAgICB9LFxuICB9O1xuICBpZiAocmFuZ2UuZS5jIDwgRVhDRUxfTUFYX0NPTF9DT1VOVCAmJiByYW5nZS5lLnIgPCBFWENFTF9NQVhfUk9XX0NPVU5UKSB7XG4gICAgd29ya3NoZWV0WychcmVmJ10gPSBYTFNYLnV0aWxzLmVuY29kZV9yYW5nZShyYW5nZSk7XG4gIH1cblxuICByZXR1cm4gd29ya3NoZWV0O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgKHNoZWV0cywgZmlsZU5hbWUpID0+IHtcbiAgY29uc3Qgd29ya2Jvb2sgPSB7IFNoZWV0TmFtZXM6IFtdLCBTaGVldHM6IHt9IH07XG5cbiAgc2hlZXRzLmZvckVhY2goKHNoZWV0LCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IHNoZWV0TmFtZSA9IHNoZWV0Lm5hbWUgfHwgYFNoZWV0ICR7aW5kZXggKyAxfWA7XG4gICAgd29ya2Jvb2suU2hlZXROYW1lcy5wdXNoKHNoZWV0TmFtZSk7XG4gICAgY29uc3Qgd3NTaGVldCA9IGNyZWF0ZURhdGFTaGVldChzaGVldCk7XG4gICAgd29ya2Jvb2suU2hlZXRzW3NoZWV0TmFtZV0gPSB3c1NoZWV0O1xuICB9KTtcblxuICBjb25zdCB3Ym91dCA9IFhMU1gud3JpdGUod29ya2Jvb2ssIHdyaXRlT3B0aW9ucyk7XG4gIGZ1bmN0aW9uIHMyYWIocykge1xuICAgIGNvbnN0IGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihzLmxlbmd0aCk7XG4gICAgY29uc3QgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1Zik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgIT09IHMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZpZXdbaV0gPSBzLmNoYXJDb2RlQXQoaSkgJiAweEZGO1xuICAgIH1cbiAgICByZXR1cm4gYnVmO1xuICB9XG5cbiAgLyogdGhlIHNhdmVBcyBjYWxsIGRvd25sb2FkcyBhIGZpbGUgb24gdGhlIGxvY2FsIG1hY2hpbmUgKi9cbiAgc2F2ZUFzKG5ldyBCbG9iKFtzMmFiKHdib3V0KV0sIHsgdHlwZTogJycgfSksIGAke2ZpbGVOYW1lfS54bHN4YCk7XG59O1xuIl19